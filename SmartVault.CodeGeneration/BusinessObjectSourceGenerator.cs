using Microsoft.CodeAnalysis;
using System.Xml.Serialization;
using System.IO;
using System;
using SmartVault.Library;

namespace SmartVault.CodeGeneration
{
    [Generator]
    public class BusinessObjectSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            var additionalFiles = context.AdditionalFiles;

            // Build up the source code
            for (int i = 0; i < additionalFiles.Length; i++)
            {
                var file = additionalFiles[i];
                var fileContents = file?.GetText()?.ToString();
                var name = Path.GetFileNameWithoutExtension(file?.Path);

                var businessObjectModel = GetBusinessObject(fileContents);
                string propertiesString = GenerateProperties(businessObjectModel);
                string businessObjectClassString = GenerateClassString(mainMethod, name, propertiesString);
                context.AddSource($"{name}.generated.cs", businessObjectClassString);
            }
        }

        private static string GenerateClassString(IMethodSymbol? mainMethod, string name, string propertiesString)
        {
            return $@"// <auto-generated/>
namespace {mainMethod?.ContainingNamespace.ToDisplayString()}.BusinessObjects
{{
    public partial class {name}
    {{
        {propertiesString}
    }}
}}
";
        }

        private BusinessObject? GetBusinessObject(string? fileContents)
        {
            var serializer = new XmlSerializer(typeof(BusinessObject));
            using var reader = new StringReader(fileContents);
            return (BusinessObject)serializer.Deserialize(reader);
        }

        private static string GenerateProperties(BusinessObject businessObjectModel)
        {
            string propertiesString = "";
            for (int j = 0; j < businessObjectModel?.PropertyGroup?.Property?.Count; j++)
            {
                var property = businessObjectModel.PropertyGroup.Property[j];
                propertiesString += string.Format("        public {0} {1} {{ get; set; }}{2}", property.Type, property.Name, Environment.NewLine);
            }

            return propertiesString;
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}